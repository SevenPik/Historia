// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: places.sql

package db

import (
	"context"
)

const createPlace = `-- name: CreatePlace :one
INSERT INTO place (name)
VALUES ($1)
RETURNING id
`

func (q *Queries) CreatePlace(ctx context.Context, name string) (int32, error) {
	row := q.db.QueryRow(ctx, createPlace, name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deletePlace = `-- name: DeletePlace :exec
DELETE
FROM place
WHERE id = $1
`

func (q *Queries) DeletePlace(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deletePlace, id)
	return err
}

const getPlaces = `-- name: GetPlaces :many
SELECT id, name FROM place
`

func (q *Queries) GetPlaces(ctx context.Context) ([]Place, error) {
	rows, err := q.db.Query(ctx, getPlaces)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Place
	for rows.Next() {
		var i Place
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlacesFull = `-- name: GetPlacesFull :many
SELECT g.id   AS id,
       g.name AS grave,
       r.name AS row,
       q.name AS quarter,
       c.name AS cementery,
       p.name AS place
FROM place p
         INNER JOIN cemetery c ON p.id = c.burial_place_id
         INNER JOIN quarter q ON c.id = q.cemetery_id
         INNER JOIN row r ON q.id = r.quarter_id
         INNER JOIN grave g ON r.id = g.row_id
`

type GetPlacesFullRow struct {
	ID        int32   `json:"id"`
	Grave     *string `json:"grave"`
	Row       *string `json:"row"`
	Quarter   *string `json:"quarter"`
	Cementery *string `json:"cementery"`
	Place     string  `json:"place"`
}

func (q *Queries) GetPlacesFull(ctx context.Context) ([]GetPlacesFullRow, error) {
	rows, err := q.db.Query(ctx, getPlacesFull)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPlacesFullRow
	for rows.Next() {
		var i GetPlacesFullRow
		if err := rows.Scan(
			&i.ID,
			&i.Grave,
			&i.Row,
			&i.Quarter,
			&i.Cementery,
			&i.Place,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlace = `-- name: UpdatePlace :one
UPDATE place
SET name = $2
WHERE id = $1
RETURNING id
`

type UpdatePlaceParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdatePlace(ctx context.Context, arg UpdatePlaceParams) (int32, error) {
	row := q.db.QueryRow(ctx, updatePlace, arg.ID, arg.Name)
	var id int32
	err := row.Scan(&id)
	return id, err
}
