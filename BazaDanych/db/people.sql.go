// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: people.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const createPerson = `-- name: CreatePerson :exec
INSERT INTO person (name) VALUES ($1)
`

func (q *Queries) CreatePerson(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, createPerson, name)
	return err
}

const deletePerson = `-- name: DeletePerson :exec
DELETE FROM person WHERE id = $1
`

func (q *Queries) DeletePerson(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletePerson, id)
	return err
}

const getPeople = `-- name: GetPeople :many
SELECT id, name, inscription, other_names, code_names, birth_date, birth_place_id, death_date, death_place_id, grave_id, description, sources FROM person
`

func (q *Queries) GetPeople(ctx context.Context) ([]Person, error) {
	rows, err := q.db.QueryContext(ctx, getPeople)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Person
	for rows.Next() {
		var i Person
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Inscription,
			pq.Array(&i.OtherNames),
			pq.Array(&i.CodeNames),
			&i.BirthDate,
			&i.BirthPlaceID,
			&i.DeathDate,
			&i.DeathPlaceID,
			&i.GraveID,
			&i.Description,
			&i.Sources,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPerson = `-- name: GetPerson :one
SELECT id, name, inscription, other_names, code_names, birth_date, birth_place_id, death_date, death_place_id, grave_id, description, sources FROM person WHERE id = $1
`

func (q *Queries) GetPerson(ctx context.Context, id int32) (Person, error) {
	row := q.db.QueryRowContext(ctx, getPerson, id)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Inscription,
		pq.Array(&i.OtherNames),
		pq.Array(&i.CodeNames),
		&i.BirthDate,
		&i.BirthPlaceID,
		&i.DeathDate,
		&i.DeathPlaceID,
		&i.GraveID,
		&i.Description,
		&i.Sources,
	)
	return i, err
}

const updatePerson = `-- name: UpdatePerson :exec
UPDATE person SET name = $2 WHERE id = $1
`

type UpdatePersonParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdatePerson(ctx context.Context, arg UpdatePersonParams) error {
	_, err := q.db.ExecContext(ctx, updatePerson, arg.ID, arg.Name)
	return err
}
